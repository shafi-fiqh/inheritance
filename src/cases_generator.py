import argparse
import itertools
import pandas as pd
import os


class CaseGenerator:
      def __init__(self,
                   config: str):
          """
          Initialize the list of inheritors. This can increase to more sophisticated levels in the future.
          :param config: Comma separated file containing the inheritors.
          """
          family_csv = pd.read_csv(config)
          self.inheritors = list(family_csv['Inheritor'])
          return
      def generate_cases(self,
                         n_types: int):
          """
          Generator object for inheritance cases to be solved.
          :param n_types: number of distinct different types of inheritors. For example Daughter + Son is considered 2 types. Daugher x 2 + Son is still considered n_types = 2.
          :return: Generator object for inheritane cases with the specified types
          """
          self.n_types = n_types
          self.generator = itertools.combinations(self.inheritors, n_types)
          return self.generator
      def save_cases(self,
                     output: str,
                     chunk_size: int):
          """
          Append cases to an output file. We will yield and append cases one by one to the file to avoid memory issues, as the permutation space can get quite large.
          :param output: string for the csv filepath
          :return: None
          """
          columns = ['Inheritor_' + str(i) for i in range(1, self.n_types+1)]
          base = pd.DataFrame(columns=columns)
          base.to_csv(output, index=False)
          n=0
          for case in self.generator:
              temp = pd.DataFrame({'Inheritor_' + str(i) : [case[i]] for i in range(len(case))})
              base=base.append(temp, ignore_index=True)
              n+=1
              if n % chunk_size == 0:
                 base.to_csv(output, mode='a', index=False, header=False)
                 base = pd.DataFrame(columns=columns)
          #Add the remainder to the csv, unless it stopped exactly on a chunk_size multiple.
          if n % chunk_size != 0:
             base.to_csv(output, mode='a', index=False, header=False)




if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Case generator parameters')
    parser.add_argument("--config",
                        type=str,
                        required='True',
                        help="Path to the csv file containing the list of inheritors")
    parser.add_argument("--n_types",
                        type=int,
                        required='True',
                        help="Size of the inheritance cases generated by type of inheritor.")
    parser.add_argument("--output",
                        type=str,
                        required='True',
                        help="Output filename for the generated cases")
    args = parser.parse_args()
    casegen = CaseGenerator(args.config)
    casegen.generate_cases(args.n_types)
    casegen.save_cases(os.path.join('output', args.output), chunk_size=10000)




